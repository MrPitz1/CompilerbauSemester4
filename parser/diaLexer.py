# Generated from dia.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,86,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,4,7,43,8,
        7,11,7,12,7,44,1,7,1,7,1,8,4,8,50,8,8,11,8,12,8,51,1,8,1,8,1,9,1,
        9,5,9,58,8,9,10,9,12,9,61,9,9,1,9,1,9,1,10,1,10,5,10,67,8,10,10,
        10,12,10,70,9,10,1,10,1,10,1,11,4,11,75,8,11,11,11,12,11,76,1,12,
        5,12,80,8,12,10,12,12,12,83,9,12,1,12,1,12,0,0,13,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,5,2,0,10,10,
        13,13,3,0,9,9,12,12,32,32,1,0,39,39,1,0,34,34,7,0,10,10,13,13,34,
        34,39,39,58,59,123,123,125,125,91,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,
        0,0,11,37,1,0,0,0,13,39,1,0,0,0,15,42,1,0,0,0,17,49,1,0,0,0,19,55,
        1,0,0,0,21,64,1,0,0,0,23,74,1,0,0,0,25,81,1,0,0,0,27,28,5,123,0,
        0,28,2,1,0,0,0,29,30,5,125,0,0,30,4,1,0,0,0,31,32,5,39,0,0,32,6,
        1,0,0,0,33,34,5,34,0,0,34,8,1,0,0,0,35,36,5,58,0,0,36,10,1,0,0,0,
        37,38,5,61,0,0,38,12,1,0,0,0,39,40,5,59,0,0,40,14,1,0,0,0,41,43,
        7,0,0,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,
        45,46,1,0,0,0,46,47,6,7,0,0,47,16,1,0,0,0,48,50,7,1,0,0,49,48,1,
        0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,53,1,0,0,0,53,
        54,6,8,0,0,54,18,1,0,0,0,55,59,5,39,0,0,56,58,8,2,0,0,57,56,1,0,
        0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,
        1,0,0,0,62,63,5,39,0,0,63,20,1,0,0,0,64,68,5,34,0,0,65,67,8,3,0,
        0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,71,
        1,0,0,0,70,68,1,0,0,0,71,72,5,34,0,0,72,22,1,0,0,0,73,75,8,4,0,0,
        74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,24,1,
        0,0,0,78,80,3,23,11,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,
        81,82,1,0,0,0,82,84,1,0,0,0,83,81,1,0,0,0,84,85,3,11,5,0,85,26,1,
        0,0,0,7,0,44,51,59,68,76,81,1,6,0,0
    ]

class diaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LPAREN = 1
    RPAREN = 2
    SINGLE_QUOTE = 3
    DOUBLE_QUOTE = 4
    COLON = 5
    EQUALS = 6
    SEMICOLON = 7
    LINEBREAK = 8
    WS = 9
    STRING_SINGLE = 10
    STRING_DOUBLE = 11
    CODE = 12
    VARIABLE = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'''", "'\"'", "':'", "'='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "SINGLE_QUOTE", "DOUBLE_QUOTE", "COLON", 
            "EQUALS", "SEMICOLON", "LINEBREAK", "WS", "STRING_SINGLE", "STRING_DOUBLE", 
            "CODE", "VARIABLE" ]

    ruleNames = [ "LPAREN", "RPAREN", "SINGLE_QUOTE", "DOUBLE_QUOTE", "COLON", 
                  "EQUALS", "SEMICOLON", "LINEBREAK", "WS", "STRING_SINGLE", 
                  "STRING_DOUBLE", "CODE", "VARIABLE" ]

    grammarFileName = "dia.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


