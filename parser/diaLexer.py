# Generated from C:/Users/simon/Documents/hochschule/compiler/CompilerbauSemester4/parser/dia.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,107,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,4,3,31,8,3,11,3,12,3,32,1,3,1,3,1,4,4,4,38,8,4,11,4,12,4,39,
        1,4,1,4,1,5,1,5,5,5,46,8,5,10,5,12,5,49,9,5,1,5,1,5,1,6,1,6,5,6,
        55,8,6,10,6,12,6,58,9,6,1,6,1,6,1,7,4,7,63,8,7,11,7,12,7,64,1,8,
        1,8,5,8,69,8,8,10,8,12,8,72,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,
        81,8,9,10,9,12,9,84,9,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,5,10,97,8,10,10,10,12,10,100,9,10,1,10,1,10,1,10,1,10,1,
        10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,1,0,5,2,0,10,10,13,13,3,0,9,9,12,12,32,32,1,0,39,39,1,0,34,34,
        7,0,10,10,13,13,34,35,39,39,59,59,123,123,125,125,114,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,
        23,1,0,0,0,3,25,1,0,0,0,5,27,1,0,0,0,7,30,1,0,0,0,9,37,1,0,0,0,11,
        43,1,0,0,0,13,52,1,0,0,0,15,62,1,0,0,0,17,66,1,0,0,0,19,75,1,0,0,
        0,21,91,1,0,0,0,23,24,5,123,0,0,24,2,1,0,0,0,25,26,5,125,0,0,26,
        4,1,0,0,0,27,28,5,59,0,0,28,6,1,0,0,0,29,31,7,0,0,0,30,29,1,0,0,
        0,31,32,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,34,1,0,0,0,34,35,
        6,3,0,0,35,8,1,0,0,0,36,38,7,1,0,0,37,36,1,0,0,0,38,39,1,0,0,0,39,
        37,1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,42,6,4,0,0,42,10,1,0,0,
        0,43,47,5,39,0,0,44,46,8,2,0,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,
        1,0,0,0,47,48,1,0,0,0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,39,0,0,
        51,12,1,0,0,0,52,56,5,34,0,0,53,55,8,3,0,0,54,53,1,0,0,0,55,58,1,
        0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,59,1,0,0,0,58,56,1,0,0,0,59,
        60,5,34,0,0,60,14,1,0,0,0,61,63,8,4,0,0,62,61,1,0,0,0,63,64,1,0,
        0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,16,1,0,0,0,66,70,5,35,0,0,67,
        69,8,0,0,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,
        0,71,73,1,0,0,0,72,70,1,0,0,0,73,74,6,8,0,0,74,18,1,0,0,0,75,76,
        5,39,0,0,76,77,5,39,0,0,77,78,5,39,0,0,78,82,1,0,0,0,79,81,8,2,0,
        0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,
        1,0,0,0,84,82,1,0,0,0,85,86,5,39,0,0,86,87,5,39,0,0,87,88,5,39,0,
        0,88,89,1,0,0,0,89,90,6,9,0,0,90,20,1,0,0,0,91,92,5,34,0,0,92,93,
        5,34,0,0,93,94,5,34,0,0,94,98,1,0,0,0,95,97,8,3,0,0,96,95,1,0,0,
        0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,
        98,1,0,0,0,101,102,5,34,0,0,102,103,5,34,0,0,103,104,5,34,0,0,104,
        105,1,0,0,0,105,106,6,10,0,0,106,22,1,0,0,0,9,0,32,39,47,56,64,70,
        82,98,1,6,0,0
    ]

class diaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LPAREN = 1
    RPAREN = 2
    SEMICOLON = 3
    LINEBREAK = 4
    WS = 5
    STRING_SINGLE = 6
    STRING_DOUBLE = 7
    CODE = 8
    COMMENT_HASH = 9
    COMMENT_SINGLE = 10
    COMMENT_DOUBLE = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "SEMICOLON", "LINEBREAK", "WS", "STRING_SINGLE", 
            "STRING_DOUBLE", "CODE", "COMMENT_HASH", "COMMENT_SINGLE", "COMMENT_DOUBLE" ]

    ruleNames = [ "LPAREN", "RPAREN", "SEMICOLON", "LINEBREAK", "WS", "STRING_SINGLE", 
                  "STRING_DOUBLE", "CODE", "COMMENT_HASH", "COMMENT_SINGLE", 
                  "COMMENT_DOUBLE" ]

    grammarFileName = "dia.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


